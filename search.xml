<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>检测到#include 错误。请更新 includePath解决办法</title>
    <url>/2024/02/13/%E6%A3%80%E6%B5%8B%E5%88%B0%20#include%20%E9%94%99%E8%AF%AF%E3%80%82%E8%AF%B7%E6%9B%B4%E6%96%B0%20includePath/</url>
    <content><![CDATA[<h1 id="“检测到-include-错误。请更新-includePath”-解决办法"><a href="#“检测到-include-错误。请更新-includePath”-解决办法" class="headerlink" title="“检测到 #include 错误。请更新 includePath” 解决办法"></a>“检测到 #include 错误。请更新 includePath” 解决办法</h1><p>用vscode时遇到了这样的报错<br><img src="/images/a1.png" alt="bug" title="bug"></p>
<p>通过修改编译器路径等方法都没用</p>
<p>win+R打开终端<br>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ -v -E -x c++ -</span><br></pre></td></tr></table></figure>
<p>复制如下内容 </p>
<p><img src="/images/a2.png" alt="bug" title="bug"></p>
<p>在vscode中摁ctrl+shift+p搜索json文件 </p>
<p><img src="/images/a5.png" alt="bug" title="bug"></p>
<p>将刚才复制内容粘贴至includePath中，注意格式 </p>
<p><img src="/images/a3.png" alt="bug" title="bug"></p>
<p>完成 </p>
<p><img src="/images/a4.png" alt="bug" title="bug"></p>
]]></content>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Test</title>
    <url>/2023/11/01/text/</url>
    <content><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><pre><code class="代码">printf(&quot;hello world&quot;);
</code></pre>
<p><font color=Blue>蓝色</font><br><font color=Red>红色</font><br><font color=Green>绿色</font>  </p>
<p><img src="/images/liquidcat.png" alt="猫是液体" title="猫是液体"></p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>nbody实验</title>
    <url>/2024/07/01/n%E4%BD%93%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<p>在模拟由N个对象组成的引力交互系统中，每个对象的位置与速度随时间演进而持续变化，这一挑战即为N体问题，目标在于精确预测任一时间点上每个对象的确切位置。<br>在三维空间背景下，每个对象通过坐标(x, y, z)及其沿x, y, z轴的速度分量(vx, vy, vz)来描述，且假设所有对象质量一致，简化为单位质量m&#x3D;1。<br>引力作用遵循如下法则计算两物体间的相互吸引：<br><img src="/images/nbody1.png" alt="nbody" title="nbody"><br>这里，Fx，Fy，Fz代表引力在三维坐标轴上的分量，dx，dy，dz为两物体在相应坐标轴上的距离差，d是两物体间总距离的欧氏距离，并加入了一个小的软化因子以避免除零异常。<br>速度更新依据总引力的积分：<br><img src="/images/nbody2.png" alt="nbody" title="nbody"><br>其中，△vx，△vy，△vz为速度增量，dt代表极小的时间间隔。<br>随后，基于新的速度更新位置：<br><img src="/images/nbody3.png" alt="nbody" title="nbody"><br>在传统的串行处理中，通过反复执行“累加引力→速度更新→位置更新”的流程来逐步推进模拟。<br>转至CUDA C并行环境，每个CUDA线程分别处理一个天体，首先通过cudaMemcpy将主存数据传输到GPU。各线程独立执行上述“引力累加、速度与位置更新”的循环，充分利用GPU的并行处理能力。计算完毕后，再次运用cudaMemcpy将结果数据从GPU回传至主存，完成并行模拟过程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &quot;timer.h&quot;</span><br><span class="line">#include &quot;check.h&quot;</span><br><span class="line">#include &lt;cuda_runtime.h&gt;</span><br><span class="line"></span><br><span class="line">#define SOFTENING 1e-9f</span><br><span class="line">#define BLOCK_SIZE 128</span><br><span class="line">#define BLOCK_STEP 32</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Each body contains x, y, and z coordinate positions,</span><br><span class="line"> * as well as velocities in the x, y, and z directions.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    float x, y, z, vx, vy, vz;</span><br><span class="line">&#125; Body;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Do not modify this function. A constraint of this exercise is</span><br><span class="line"> * that it remain a host function.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">void randomizeBodies(float *data, int n)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        data[i] = 2.0f * (rand() / (float)RAND_MAX) - 1.0f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * This function calculates the gravitational impact of all bodies in the system</span><br><span class="line"> * on all others, but does not update their positions.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">__global__ void bodyForce(Body *p, float dt, int n)</span><br><span class="line">&#123;</span><br><span class="line">    // 从全局内存获取本线程负责的物体。</span><br><span class="line">    int i = (threadIdx.x + blockIdx.x * blockDim.x) % n;</span><br><span class="line">    Body body = p[i];</span><br><span class="line"></span><br><span class="line">    // 块级共享内存，用于缓存一个批次的施力物体。</span><br><span class="line">    __shared__ float3 tile[BLOCK_SIZE];</span><br><span class="line"></span><br><span class="line">    float Fx = 0.0f;</span><br><span class="line">    float Fy = 0.0f;</span><br><span class="line">    float Fz = 0.0f;</span><br><span class="line"></span><br><span class="line">    int nBlocks = n / BLOCK_SIZE;</span><br><span class="line">    int k = blockIdx.x + blockIdx.x / nBlocks;</span><br><span class="line"></span><br><span class="line">#pragma unroll 32</span><br><span class="line">    for (int swap = 0; swap &lt; n / (BLOCK_STEP * BLOCK_SIZE); swap++)</span><br><span class="line">    &#123;</span><br><span class="line">        k %= nBlocks;</span><br><span class="line"></span><br><span class="line">        // 从全局内存获取新一批物体，装入共享内存。</span><br><span class="line">        Body temp = p[k * BLOCK_SIZE + threadIdx.x];</span><br><span class="line">        tile[threadIdx.x] = make_float3(temp.x, temp.y, temp.z);</span><br><span class="line"></span><br><span class="line">        // 确保新一批物体已经全部装入。</span><br><span class="line">        __syncthreads();</span><br><span class="line"></span><br><span class="line">#pragma unroll 32</span><br><span class="line">        // 叠加新一批物体施加在负责物体上的引力。</span><br><span class="line">        for (int j = 0; j &lt; BLOCK_SIZE; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            float dx = tile[j].x - body.x;</span><br><span class="line">            float dy = tile[j].y - body.y;</span><br><span class="line">            float dz = tile[j].z - body.z;</span><br><span class="line">            float distSqr = dx * dx + dy * dy + dz * dz + SOFTENING;</span><br><span class="line">            float invDist = rsqrtf(distSqr);</span><br><span class="line">            float invDist3 = invDist * invDist * invDist;</span><br><span class="line"></span><br><span class="line">            Fx += dx * invDist3;</span><br><span class="line">            Fy += dy * invDist3;</span><br><span class="line">            Fz += dz * invDist3;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 确保新一批物体已经全部消耗。</span><br><span class="line">        __syncthreads();</span><br><span class="line"></span><br><span class="line">        k += BLOCK_STEP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 使用原子加法更新速度，避免竞态问题。</span><br><span class="line">    atomicAdd(&amp;p[i].vx, dt * Fx);</span><br><span class="line">    atomicAdd(&amp;p[i].vy, dt * Fy);</span><br><span class="line">    atomicAdd(&amp;p[i].vz, dt * Fz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__global__ void integratePosition(Body *p, float dt, int n)</span><br><span class="line">&#123;</span><br><span class="line">    // 计算本线程负责的物体的下标。</span><br><span class="line">    int i = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line"></span><br><span class="line">    if (i &gt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 更新坐标。</span><br><span class="line">    p[i].x += p[i].vx * dt;</span><br><span class="line">    p[i].y += p[i].vy * dt;</span><br><span class="line">    p[i].z += p[i].vz * dt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(const int argc, const char **argv)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Do not change the value for `nBodies` here. If you would like to modify it,</span><br><span class="line">     * pass values into the command line.</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    int nBodies = 2 &lt;&lt; 11;</span><br><span class="line">    int salt = 0;</span><br><span class="line">    if (argc &gt; 1)</span><br><span class="line">        nBodies = 2 &lt;&lt; atoi(argv[1]);</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * This salt is for assessment reasons. Tampering with it will result in automatic failure.</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    if (argc &gt; 2)</span><br><span class="line">        salt = atoi(argv[2]);</span><br><span class="line"></span><br><span class="line">    const float dt = 0.01f; // time step</span><br><span class="line">    const int nIters = 10;  // simulation iterations</span><br><span class="line"></span><br><span class="line">    int bytes = nBodies * sizeof(Body);</span><br><span class="line">    float *buf;</span><br><span class="line">    cudaMallocHost(&amp;buf, bytes);</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * As a constraint of this exercise, `randomizeBodies` must remain a host function.</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    randomizeBodies(buf, 6 * nBodies); // Init pos / vel data</span><br><span class="line"></span><br><span class="line">    float *d_buf;</span><br><span class="line">    cudaMalloc(&amp;d_buf, bytes);</span><br><span class="line">    Body *d_p = (Body *)d_buf;</span><br><span class="line">    cudaMemcpy(d_buf, buf, bytes, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">    int nBlocks = nBodies / BLOCK_SIZE;</span><br><span class="line"></span><br><span class="line">    double totalTime = 0.0;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * This simulation will run for 10 cycles of time, calculating gravitational</span><br><span class="line">     * interaction amongst bodies, and adjusting their positions to reflect.</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    /*******************************************************************/</span><br><span class="line">    // Do not modify these 2 lines of code.</span><br><span class="line">    for (int iter = 0; iter &lt; nIters; iter++)</span><br><span class="line">    &#123;</span><br><span class="line">        StartTimer();</span><br><span class="line">        /*******************************************************************/</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * You will likely wish to refactor the work being done in `bodyForce`,</span><br><span class="line">         * as well as the work to integrate the positions.</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        bodyForce&lt;&lt;&lt;nBlocks * BLOCK_STEP, BLOCK_SIZE&gt;&gt;&gt;(d_p, dt, nBodies); // compute interbody forces</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * This position integration cannot occur until this round of `bodyForce` has completed.</span><br><span class="line">         * Also, the next round of `bodyForce` cannot begin until the integration is complete.</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        integratePosition&lt;&lt;&lt;nBlocks, BLOCK_SIZE&gt;&gt;&gt;(d_p, dt, nBodies);</span><br><span class="line"></span><br><span class="line">        if (iter == nIters - 1)</span><br><span class="line">        &#123;</span><br><span class="line">            cudaMemcpy(buf, d_buf, bytes, cudaMemcpyDeviceToHost);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*******************************************************************/</span><br><span class="line">        // Do not modify the code in this section.</span><br><span class="line">        const double tElapsed = GetTimer() / 1000.0;</span><br><span class="line">        totalTime += tElapsed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    double avgTime = totalTime / (double)(nIters);</span><br><span class="line">    float billionsOfOpsPerSecond = 1e-9 * nBodies * nBodies / avgTime;</span><br><span class="line"></span><br><span class="line">#ifdef ASSESS</span><br><span class="line">    checkPerformance(buf, billionsOfOpsPerSecond, salt);</span><br><span class="line">#else</span><br><span class="line">    checkAccuracy(buf, nBodies);</span><br><span class="line">    printf(&quot;%d Bodies: average %0.3f Billion Interactions / second\n&quot;, nBodies, billionsOfOpsPerSecond);</span><br><span class="line">    salt += 1;</span><br><span class="line">#endif</span><br><span class="line">    /*******************************************************************/</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Feel free to modify code below.</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    cudaFree(d_buf);</span><br><span class="line">    cudaFreeHost(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>nbody</tag>
      </tags>
  </entry>
</search>
